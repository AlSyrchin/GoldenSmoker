git init
#сделает Git-репозиторием папку

rm -rf .git
#удалили подпапку .git 
#ключ -r (от англ. recursive — «рекурсивно») позволяет удалять папки вместе с их содержимым;
#ключ -f (от англ. force — «заставить») избавит вас от вопросов вроде «Вы точно хотите удалить этот файл? А этот? И этот тоже?».

git add --all 
# подготовили к сохранению все файлы в репозитории

git add . 
# добавить всю текущую папку

git commit -m ''
#добавление коммита (сохранение)

git log
#Просмотреть историю коммитов (последние коммиты оказываются первыми сверху)

git log --oneline
#Просмотреть сокращенную историю коммитов

ls -la .ssh/ 
# вывели список созданных ключей (прежде зайти в домашнюю папку)

git remote add origin git@github.com:%ИМЯ_АККАУНТА%/first-project.git
#git remote add добавляет удалённый репозиторий, В качестве имени используйте слово origin, А URL вы скопировали со страницы удалённого репозитория

git remote -v
#Убедиться, что репозитории связаны/ Флаг -v — короткая форма флага --verbose (англ. «подробный»). Он позволяет показать больше информации в выводе.

git push -u origin main 
# Загрузить на удалённый репозиторий. Если команда приведёт к ошибке, попробуйте, заменить main на master.

git commit --amend --no-edit
#Дополнили последний коммит забытым файлом

git commit --amend -m "Новое сообщение"
#Изменить сообщение коммита

git restore --staged <file>
#переведёт файл из staged обратно в modified или untracked

git reset --hard <commit hash>
#«откатит» историю до коммита с хешем <hash>. Более поздние коммиты потеряются!

git restore <file>
#«откатит» изменения в файле до последней сохранённой (в коммите или в staging) версии.

